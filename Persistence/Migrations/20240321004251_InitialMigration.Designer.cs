// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ButikkKatalogContext))]
    [Migration("20240321004251_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Entities.ChainInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Chain")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainClassName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChainNr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChainInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Chain = "Prix",
                            ChainClassName = "prix",
                            ChainImage = "/assets/images/mapmarkers/01.png?7003341bcfe337a104c5a8ee79251d4d",
                            ChainNr = "01"
                        },
                        new
                        {
                            Id = 2,
                            Chain = "Mega",
                            ChainClassName = "mega",
                            ChainImage = "/assets/images/mapmarkers/03.png?d7b089ef57ad29e69c3520f42bc8aae1",
                            ChainNr = "03"
                        },
                        new
                        {
                            Id = 3,
                            Chain = "Extra",
                            ChainClassName = "extra",
                            ChainImage = "/assets/images/mapmarkers/07.png?938d3bb66e14f3c8dd9fc5b45feb4fce",
                            ChainNr = "07"
                        });
                });

            modelBuilder.Entity("Entities.InStoreServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("MemberOffer")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Post")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Postnord")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("InStoreServices", (string)null);
                });

            modelBuilder.Entity("Entities.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Dato")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenString")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SpecialOpeningHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weekdays")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("OpeningHours", (string)null);
                });

            modelBuilder.Entity("Entities.OpeningHoursSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Dato")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenString")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SpecialOpeningHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weekdays")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpeningHoursSpecial", (string)null);
                });

            modelBuilder.Entity("Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChainId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChainInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("InStoreServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEcommerce")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double>("Lng")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewspaperUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OpenNow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpeningHoursId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpeningHoursToday")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("SLag")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChainInfoId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("Entities.InStoreServices", b =>
                {
                    b.HasOne("Entities.Store", null)
                        .WithMany("InStoreServices")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Entities.OpeningHours", b =>
                {
                    b.HasOne("Entities.Store", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Store", b =>
                {
                    b.HasOne("Entities.ChainInfo", "ChainInfo")
                        .WithMany()
                        .HasForeignKey("ChainInfoId");

                    b.Navigation("ChainInfo");
                });

            modelBuilder.Entity("Entities.Store", b =>
                {
                    b.Navigation("InStoreServices");

                    b.Navigation("OpeningHours");
                });
#pragma warning restore 612, 618
        }
    }
}
